generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id            String    @id @default(cuid())
  email         String    @unique
  emailVerified DateTime?
  name          String?
  image         String?

  // Relationships
  accounts      Account[]
  sessions      Session[]
  repositories  Repository[]
  searches      Search[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Repository {
  id          String   @id @default(cuid())
  name        String
  owner       String
  url         String
  githubId    Int
  userId      String
  avatarUrl   String
  status      RepositoryStatus @default(PENDING)
  shortSummary String?  @db.Text  
  longSummary  String?  @db.Text 
  directories Directory[]
  files       File[] 
  features    Feature[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Directory {
  id           String   @id @default(cuid())
  path         String
  summary      String?  @db.Text
  repositoryId String
  parentId     String?
  repository   Repository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  parent       Directory? @relation("DirectoryTree", fields: [parentId], references: [id])
  children     Directory[] @relation("DirectoryTree")
  files        File[]

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

}

model File {
  id           String   @id @default(cuid())
  path         String
  name         String
  content      String?  @db.Text
  shortSummary String?  @db.Text  
  longSummary  String?
  repository   Repository       @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  repositoryId String
  directoryId  String?
  directory    Directory? @relation(fields: [directoryId], references: [id], onDelete: Cascade)

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

}

model Feature {
  id           String   @id @default(cuid())
  name         String   
  description  String   @db.Text  
  category     FeatureCategory
  repository   Repository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  repositoryId String

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([category])
}

model Search {
  id        String   @id @default(cuid())
  query     String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

enum RepositoryStatus {
  PENDING
  PROCESSING
  SUCCESS
  FAILED
  CANCELLED
}

enum FeatureCategory {
  AUTHENTICATION
  DATABASE
  UI_COMPONENTS
  STATE_MANAGEMENT
  API_INTEGRATION
  TESTING
  DEVOPS
  SECURITY
  PERFORMANCE
  DOCUMENTATION
  OTHER
}