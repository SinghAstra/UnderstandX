generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id            String    @id @default(cuid())
  email         String    @unique
  emailVerified DateTime?
  name          String?
  image         String?

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relationships
  accounts      Account[]
  sessions      Session[]
  repositories Repository[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Repository {
  id String @id @default(cuid())
  githubId Int 
  name String
  fullName String
  description String?
  status RepositoryStatus @default(PENDING)
  owner String
  url String
  avatarUrl String? 
  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  chunks RepositoryChunk[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model RepositoryChunk {
  id String @id @default(cuid())
  repositoryId String
  repository Repository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  content String
  type String
  filepath String
  embeddings Float[]
  keywords String[]
}

enum UserRole {
 GUEST
 USER 
 ADMIN  
}
enum RepositoryStatus {
  PENDING
  PROCESSING
  SUCCESS
  FAILED
  CANCELED
}
